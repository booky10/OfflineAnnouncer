/*
 * This file is part of spark.
 *
 *  Copyright (c) lucko (Luck) <luck@lucko.me>
 *  Copyright (c) contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package spark;

import "spark/spark.proto";

option java_package = "me.lucko.spark.proto";
option java_outer_classname = "SparkSamplerProtos";

message SamplerData {
  SamplerMetadata metadata = 1;
  repeated ThreadNode threads = 2;
  map<string, string> class_sources = 3; // optional
}

message SamplerMetadata {
  CommandSenderMetadata creator = 1;
  int64 start_time = 2;
  int32 interval = 3;
  ThreadDumper thread_dumper = 4;
  DataAggregator data_aggregator = 5;
  string comment = 6;
  PlatformMetadata platform_metadata = 7;
  PlatformStatistics platform_statistics = 8;
  SystemStatistics system_statistics = 9;
  map<string, string> server_configurations = 10;

  message ThreadDumper {
    Type type = 1;
    repeated int64 ids = 2; // optional
    repeated string patterns = 3; // optional

    enum Type {
      ALL = 0;
      SPECIFIC = 1;
      REGEX = 2;
    }
  }

  message DataAggregator {
    Type type = 1;
    ThreadGrouper thread_grouper = 2;
    int64 tick_length_threshold = 3; // optional

    enum Type {
      SIMPLE = 0;
      TICKED = 1;
    }

    enum ThreadGrouper {
      BY_NAME = 0;
      BY_POOL = 1;
      AS_ONE = 2;
    }
  }
}

message ThreadNode {
  string name = 1;
  double time = 2;
  repeated StackTraceNode children = 3;
}

message StackTraceNode {
  double time = 1;
  repeated StackTraceNode children = 2;
  string class_name = 3;
  string method_name = 4;
  int32 parent_line_number = 5; // optional
  int32 line_number = 6; // optional
  string method_desc = 7; // optional
}
